var N=null,E="",T="t",U="u",searchIndex={};
var R=["num_traits","option","min_value","max_value","infinity","neg_infinity","neg_zero","Returns `-0.0`.","Returns the smallest finite value that this type can…","min_positive_value","Returns the smallest positive, normalized value that this…","Returns epsilon, a small positive value.","Returns the largest finite value that this type can…","is_infinite","is_finite","is_normal","Returns `true` if the number is neither zero, infinite,…","classify","Returns the floating point category of the number. If only…","fpcategory","Returns the largest integer less than or equal to a number.","Returns the smallest integer greater than or equal to a…","Returns the nearest integer to a number. Round half-way…","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of `self`. Returns…","Returns a number that represents the sign of `self`.","is_sign_positive","is_sign_negative","Raise a number to an integer power.","to_degrees","to_radians","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","integer_decode","Returns the mantissa, base 2 exponent, and sign as…","Shifts the bits to the left by a specified amount amount,…","Shifts the bits to the right by a specified amount amount,…","Shifts a number to the left, checking for overflow. If…","num_traits::ops","Fused multiply-add. Computes `(self * a) + b` with only…","mul_add","Performs the fused multiply-add operation.","The result after applying the operator.","epsilon","Returns `true` if `self` is positive, including `+0.0`,…","Returns `true` if `self` is negative, including `-0.0`,…","Take the reciprocal (inverse) of a number, `1/x`.","Take the square root of a number.","Returns `e^(self)`, (the exponential function).","Returns `2^(self)`.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an…","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle…","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in…","Computes the arccosine of a number. Return value is in…","Computes the arctangent of a number. Return value is in…","Computes the four quadrant arctangent of `self` (`y`) and…","Simultaneously computes the sine and cosine of the number,…","Returns `e^(self) - 1` in a way that is accurate even if…","Returns `ln(1+n)` (natural logarithm) more accurately than…","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","abs_sub","Computes the absolute value.","signum","Returns the sign of the number.","try_from","try_into","result","borrow_mut","formatter","ParseFloatError","FloatErrorKind","ToPrimitive","FromPrimitive","AsPrimitive","FloatCore","FloatConst","CheckedAdd","CheckedSub","CheckedMul","CheckedDiv","CheckedRem","CheckedNeg","CheckedShl","CheckedShr","MulAddAssign","Saturating","WrappingAdd","WrappingSub","WrappingMul","WrappingShl","WrappingShr","Numeric traits for generic mathematics","A value bounded by a minimum and a maximum","num_traits::bounds","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","num_traits::cast","Cast from one machine scalar to another.","A generic trait for converting a value to a number.","Converts the value of `self` to an `isize`.","Converts the value of `self` to an `i8`.","Converts the value of `self` to an `i16`.","Converts the value of `self` to an `i32`.","Converts the value of `self` to an `i64`.","Converts the value of `self` to an `i128`.","Converts the value of `self` to a `usize`.","Converts the value of `self` to an `u8`.","Converts the value of `self` to an `u16`.","Converts the value of `self` to an `u32`.","Converts the value of `self` to an `u64`.","Converts the value of `self` to an `u128`.","Converts the value of `self` to an `f32`.","Converts the value of `self` to an `f64`.","A generic trait for converting a number to a value.","from_isize","Convert an `isize` to return an optional value of this…","Convert an `i8` to return an optional value of this type.…","Convert an `i16` to return an optional value of this type.…","Convert an `i32` to return an optional value of this type.…","Convert an `i64` to return an optional value of this type.…","from_i128","Convert an `i128` to return an optional value of this…","from_usize","Convert a `usize` to return an optional value of this…","Convert an `u8` to return an optional value of this type.…","Convert an `u16` to return an optional value of this type.…","Convert an `u32` to return an optional value of this type.…","Convert an `u64` to return an optional value of this type.…","from_u128","Convert an `u128` to return an optional value of this…","Convert a `f32` to return an optional value of this type.…","Convert a `f64` to return an optional value of this type.…","An interface for casting between machine scalars.","Creates a number from another value that can be converted…","A generic interface for casting between machine scalars…","Convert a value to another, using the `as` operator.","num_traits::float","Generic trait for floating point numbers that works with…","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns `true` if the number is NaN.","Returns `true` if the number is infinite.","Returns `true` if the number is neither infinite or NaN.","Returns `true` if `self` is positive, including `+0.0` and…","Returns `true` if `self` is negative, including `-0.0` and…","Returns the reciprocal (multiplicative inverse) of the…","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Generic trait for floating point numbers","Returns the `NaN` value.","Returns the infinite value.","Returns the negative infinite value.","Returns `true` if this value is `NaN` and false otherwise.","Returns `true` if this value is positive infinity or…","Returns `true` if this number is neither infinite nor `NaN`.","Raise a number to a floating point power.","Return Euler’s number.","FRAC_1_PI","Return `1.0 / π`.","FRAC_1_SQRT_2","Return `1.0 / sqrt(2.0)`.","FRAC_2_PI","Return `2.0 / π`.","FRAC_2_SQRT_PI","Return `2.0 / sqrt(π)`.","FRAC_PI_2","Return `π / 2.0`.","FRAC_PI_3","Return `π / 3.0`.","FRAC_PI_4","Return `π / 4.0`.","FRAC_PI_6","Return `π / 6.0`.","FRAC_PI_8","Return `π / 8.0`.","Return `ln(10.0)`.","Return `ln(2.0)`.","Return `log10(e)`.","Return `log2(e)`.","Return Archimedes’ constant.","Return `sqrt(2.0)`.","identities","num_traits::identities","Returns the additive identity, `0`.","Returns the multiplicative identity, `1`.","Defines an additive identity element for `Self`.","Returns the additive identity element of `Self`, `0`.","Returns `true` if `self` is equal to the additive identity.","Defines a multiplicative identity element for `Self`.","Returns the multiplicative identity element of `Self`, `1`.","Returns `true` if `self` is equal to the multiplicative…","num_traits::int","count_ones","Returns the number of ones in the binary representation of…","count_zeros","Returns the number of zeros in the binary representation…","leading_zeros","Returns the number of leading zeros in the binary…","trailing_zeros","Returns the number of trailing zeros in the binary…","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","Reverses the byte order of the integer.","Convert an integer from big endian to the target's…","Convert an integer from little endian to the target's…","Convert `self` to big endian from the target's endianness.","Convert `self` to little endian from the target's…","Raises self to the power of `exp`, using exponentiation by…","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…","checked_add","Adds two numbers, checking for overflow. If overflow…","Performs subtraction that returns `None` instead of…","checked_sub","Subtracts two numbers, checking for underflow. If…","Performs multiplication that returns `None` instead of…","checked_mul","Multiplies two numbers, checking for underflow or…","Performs division that returns `None` instead of panicking…","checked_div","Divides two numbers, checking for underflow, overflow and…","Performs an integral remainder that returns `None` instead…","checked_rem","Finds the remainder of dividing two numbers, checking for…","Performs negation that returns `None` if the result can't…","checked_neg","Negates a number, returning `None` for results that can't…","Performs a left shift that returns `None` on overflow.","checked_shl","Performs a right shift that returns `None` on overflow.","checked_shr","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…","Returns the multiplicative inverse of `self`.","num_traits::ops::mul_add","The resulting type after applying the fused multiply-add.","The fused multiply-add assignment operation.","mul_add_assign","saturating","num_traits::ops::saturating","Saturating math operations","saturating_add","Saturating addition operator. Returns a+b, saturating at…","saturating_sub","Saturating subtraction operator. Returns a-b, saturating…","num_traits::ops::wrapping","Performs addition that wraps around on overflow.","wrapping_add","Wrapping (modular) addition. Computes `self + other`,…","Performs subtraction that wraps around on overflow.","wrapping_sub","Wrapping (modular) subtraction. Computes `self - other`,…","Performs multiplication that wraps around on overflow.","wrapping_mul","Wrapping (modular) multiplication. Computes `self *…","Performs a left shift that does not panic.","wrapping_shl","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…","Performs a right shift that does not panic.","wrapping_shr","Panic-free bitwise shift-right; yields `self >>…","num_traits::pow","Raises a value to the power of exp, using exponentiation…","checked_pow","Raises a value to the power of exp, returning `None` if an…","Binary operator for raising a value to a power.","Returns `self` to the power `rhs`.","num_traits::real","A trait for real number types that do not necessarily have…","Raise a number to a real number power.","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can…","is_positive","Returns true if the number is positive and false if the…","is_negative","Returns true if the number is negative and false if the…","A trait for values which cannot be negative","The base trait for numeric types, covering `0` and `1`…","FromStrRadixErr","from_str_radix","Convert from a string and radix <= 36.","The trait for types implementing basic numeric operations","The trait for `Num` types which also implement numeric…","The trait for references which implement numeric…","NumAssignOps","The trait for types implementing numeric assignment…","NumAssign","The trait for `Num` types which also implement assignment…","NumAssignRef","The trait for `NumAssign` types which also implement…","to_string","polynomial","Polynomial"];
searchIndex[R[314]]={"doc":"Manipulations and data types that represent polynomial.","i":[[3,R[315],R[314],"Polynomial expression",N,N],[11,"new",E,"Creates new `Polynomial`.",0,[[["vec"]],[R[314]]]],[11,"eval",E,"Evaluates the polynomial value.",0,[[["self"],[T]],[T]]],[11,"data",E,"Gets the slice of internal data.",0,N],[11,"pretty",E,"Pretty prints the polynomial.",0,[[["self"],["str"]],["string"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,N],[11,R[80],E,E,0,[[[U]],[R[82]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,R[83],E,E,0,[[["self"]],[T]]],[11,R[81],E,E,0,[[["self"]],[R[82]]]],[11,"eq",E,E,0,[[["self"],[R[314]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[314]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[314]]]],[11,"add",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"add",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"sub",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"sub",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"mul",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"mul",E,E,0,[[["self"],[R[314]]],[R[314]]]],[11,"neg",E,E,0,[[["self"]],[R[314]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[82]]]],[11,"zero",E,E,0,[[],[R[314]]]],[11,"is_zero",E,E,0,[[["self"]],["bool"]]],[11,"one",E,E,0,[[],[R[314]]]]],"p":[[3,R[315]]]};
searchIndex[R[0]]={"doc":R[107],"i":[[3,R[85],R[0],E,N,N],[12,"kind",E,E,0,N],[4,R[86],E,E,N,N],[13,"Empty",E,E,1,N],[13,"Invalid",E,E,1,N],[5,"clamp",E,R[108],N,[[[T],[T],[T]],[T]]],[0,"bounds",E,E,N,N],[8,"Bounded",R[109],R[110],N,N],[10,R[2],E,R[111],2,[[],["self"]]],[10,R[3],E,R[112],2,[[],["self"]]],[0,"cast",R[0],E,N,N],[5,"cast",R[113],R[114],N,[[[T]],[R[1]]]],[8,R[87],E,R[115],N,N],[11,"to_isize",E,R[116],3,[[["self"]],[R[1],["isize"]]]],[11,"to_i8",E,R[117],3,[[["self"]],[R[1],["i8"]]]],[11,"to_i16",E,R[118],3,[[["self"]],[R[1],["i16"]]]],[11,"to_i32",E,R[119],3,[[["self"]],[R[1],["i32"]]]],[10,"to_i64",E,R[120],3,[[["self"]],[R[1],["i64"]]]],[11,"to_i128",E,R[121],3,[[["self"]],[R[1],["i128"]]]],[11,"to_usize",E,R[122],3,[[["self"]],[R[1],["usize"]]]],[11,"to_u8",E,R[123],3,[[["self"]],[R[1],["u8"]]]],[11,"to_u16",E,R[124],3,[[["self"]],[R[1],["u16"]]]],[11,"to_u32",E,R[125],3,[[["self"]],[R[1],["u32"]]]],[10,"to_u64",E,R[126],3,[[["self"]],[R[1],["u64"]]]],[11,"to_u128",E,R[127],3,[[["self"]],[R[1],["u128"]]]],[11,"to_f32",E,R[128],3,[[["self"]],[R[1],["f32"]]]],[11,"to_f64",E,R[129],3,[[["self"]],[R[1],["f64"]]]],[8,R[88],E,R[130],N,N],[11,R[131],E,R[132],4,[[["isize"]],[R[1]]]],[11,"from_i8",E,R[133],4,[[["i8"]],[R[1]]]],[11,"from_i16",E,R[134],4,[[["i16"]],[R[1]]]],[11,"from_i32",E,R[135],4,[[["i32"]],[R[1]]]],[10,"from_i64",E,R[136],4,[[["i64"]],[R[1]]]],[11,R[137],E,R[138],4,[[["i128"]],[R[1]]]],[11,R[139],E,R[140],4,[[["usize"]],[R[1]]]],[11,"from_u8",E,R[141],4,[[["u8"]],[R[1]]]],[11,"from_u16",E,R[142],4,[[["u16"]],[R[1]]]],[11,"from_u32",E,R[143],4,[[["u32"]],[R[1]]]],[10,"from_u64",E,R[144],4,[[["u64"]],[R[1]]]],[11,R[145],E,R[146],4,[[["u128"]],[R[1]]]],[11,"from_f32",E,R[147],4,[[["f32"]],[R[1]]]],[11,"from_f64",E,R[148],4,[[["f64"]],[R[1]]]],[8,"NumCast",E,R[149],N,N],[10,"from",E,R[150],5,[[[T]],[R[1]]]],[8,R[89],E,R[151],N,N],[10,"as_",E,R[152],6,[[["self"]],[T]]],[0,"float",R[0],E,N,N],[8,R[90],R[153],R[154],N,N],[10,R[4],E,R[155],7,[[],["self"]]],[10,R[5],E,R[156],7,[[],["self"]]],[10,"nan",E,R[157],7,[[],["self"]]],[10,R[6],E,R[7],7,[[],["self"]]],[10,R[2],E,R[8],7,[[],["self"]]],[10,R[9],E,R[10],7,[[],["self"]]],[10,R[44],E,R[11],7,[[],["self"]]],[10,R[3],E,R[12],7,[[],["self"]]],[11,"is_nan",E,R[158],7,[[["self"]],["bool"]]],[11,R[13],E,R[159],7,[[["self"]],["bool"]]],[11,R[14],E,R[160],7,[[["self"]],["bool"]]],[11,R[15],E,R[16],7,[[["self"]],["bool"]]],[10,R[17],E,R[18],7,[[["self"]],[R[19]]]],[11,"floor",E,R[20],7,[[["self"]],["self"]]],[11,"ceil",E,R[21],7,[[["self"]],["self"]]],[11,"round",E,R[22],7,[[["self"]],["self"]]],[11,"trunc",E,R[23],7,[[["self"]],["self"]]],[11,"fract",E,R[24],7,[[["self"]],["self"]]],[11,"abs",E,R[25],7,[[["self"]],["self"]]],[11,R[78],E,R[26],7,[[["self"]],["self"]]],[11,R[27],E,R[161],7,[[["self"]],["bool"]]],[11,R[28],E,R[162],7,[[["self"]],["bool"]]],[11,"min",E,R[33],7,[[["self"],["self"]],["self"]]],[11,"max",E,R[32],7,[[["self"],["self"]],["self"]]],[11,"recip",E,R[163],7,[[["self"]],["self"]]],[11,"powi",E,R[29],7,[[["self"],["i32"]],["self"]]],[10,R[30],E,R[164],7,[[["self"]],["self"]]],[10,R[31],E,R[165],7,[[["self"]],["self"]]],[10,R[34],E,R[35],7,N],[8,"Float",E,R[166],N,N],[10,"nan",E,R[167],8,[[],["self"]]],[10,R[4],E,R[168],8,[[],["self"]]],[10,R[5],E,R[169],8,[[],["self"]]],[10,R[6],E,R[7],8,[[],["self"]]],[10,R[2],E,R[8],8,[[],["self"]]],[10,R[9],E,R[10],8,[[],["self"]]],[11,R[44],E,R[11],8,[[],["self"]]],[10,R[3],E,R[12],8,[[],["self"]]],[10,"is_nan",E,R[170],8,[[["self"]],["bool"]]],[10,R[13],E,R[171],8,[[["self"]],["bool"]]],[10,R[14],E,R[172],8,[[["self"]],["bool"]]],[10,R[15],E,R[16],8,[[["self"]],["bool"]]],[10,R[17],E,R[18],8,[[["self"]],[R[19]]]],[10,"floor",E,R[20],8,[[["self"]],["self"]]],[10,"ceil",E,R[21],8,[[["self"]],["self"]]],[10,"round",E,R[22],8,[[["self"]],["self"]]],[10,"trunc",E,R[23],8,[[["self"]],["self"]]],[10,"fract",E,R[24],8,[[["self"]],["self"]]],[10,"abs",E,R[25],8,[[["self"]],["self"]]],[10,R[78],E,R[26],8,[[["self"]],["self"]]],[10,R[27],E,R[45],8,[[["self"]],["bool"]]],[10,R[28],E,R[46],8,[[["self"]],["bool"]]],[10,R[41],E,R[40],8,[[["self"],["self"],["self"]],["self"]]],[10,"recip",E,R[47],8,[[["self"]],["self"]]],[10,"powi",E,R[29],8,[[["self"],["i32"]],["self"]]],[10,"powf",E,R[173],8,[[["self"],["self"]],["self"]]],[10,"sqrt",E,R[48],8,[[["self"]],["self"]]],[10,"exp",E,R[49],8,[[["self"]],["self"]]],[10,"exp2",E,R[50],8,[[["self"]],["self"]]],[10,"ln",E,R[51],8,[[["self"]],["self"]]],[10,"log",E,R[52],8,[[["self"],["self"]],["self"]]],[10,"log2",E,R[53],8,[[["self"]],["self"]]],[10,"log10",E,R[54],8,[[["self"]],["self"]]],[11,R[30],E,R[55],8,[[["self"]],["self"]]],[11,R[31],E,R[56],8,[[["self"]],["self"]]],[10,"max",E,R[32],8,[[["self"],["self"]],["self"]]],[10,"min",E,R[33],8,[[["self"],["self"]],["self"]]],[10,R[76],E,R[57],8,[[["self"],["self"]],["self"]]],[10,"cbrt",E,R[58],8,[[["self"]],["self"]]],[10,"hypot",E,R[59],8,[[["self"],["self"]],["self"]]],[10,"sin",E,R[60],8,[[["self"]],["self"]]],[10,"cos",E,R[61],8,[[["self"]],["self"]]],[10,"tan",E,R[62],8,[[["self"]],["self"]]],[10,"asin",E,R[63],8,[[["self"]],["self"]]],[10,"acos",E,R[64],8,[[["self"]],["self"]]],[10,"atan",E,R[65],8,[[["self"]],["self"]]],[10,"atan2",E,R[66],8,[[["self"],["self"]],["self"]]],[10,"sin_cos",E,R[67],8,N],[10,"exp_m1",E,R[68],8,[[["self"]],["self"]]],[10,"ln_1p",E,R[69],8,[[["self"]],["self"]]],[10,"sinh",E,R[70],8,[[["self"]],["self"]]],[10,"cosh",E,R[71],8,[[["self"]],["self"]]],[10,"tanh",E,R[72],8,[[["self"]],["self"]]],[10,"asinh",E,R[73],8,[[["self"]],["self"]]],[10,"acosh",E,R[74],8,[[["self"]],["self"]]],[10,"atanh",E,R[75],8,[[["self"]],["self"]]],[10,R[34],E,R[35],8,N],[8,R[91],E,E,N,N],[10,"E",E,R[174],9,[[],["self"]]],[10,R[175],E,R[176],9,[[],["self"]]],[10,R[177],E,R[178],9,[[],["self"]]],[10,R[179],E,R[180],9,[[],["self"]]],[10,R[181],E,R[182],9,[[],["self"]]],[10,R[183],E,R[184],9,[[],["self"]]],[10,R[185],E,R[186],9,[[],["self"]]],[10,R[187],E,R[188],9,[[],["self"]]],[10,R[189],E,R[190],9,[[],["self"]]],[10,R[191],E,R[192],9,[[],["self"]]],[10,"LN_10",E,R[193],9,[[],["self"]]],[10,"LN_2",E,R[194],9,[[],["self"]]],[10,"LOG10_E",E,R[195],9,[[],["self"]]],[10,"LOG2_E",E,R[196],9,[[],["self"]]],[10,"PI",E,R[197],9,[[],["self"]]],[10,"SQRT_2",E,R[198],9,[[],["self"]]],[0,R[199],R[0],E,N,N],[5,"zero",R[200],R[201],N,[[],[T]]],[5,"one",E,R[202],N,[[],[T]]],[8,"Zero",E,R[203],N,N],[10,"zero",E,R[204],10,[[],["self"]]],[10,"is_zero",E,R[205],10,[[["self"]],["bool"]]],[8,"One",E,R[206],N,N],[10,"one",E,R[207],11,[[],["self"]]],[11,"is_one",E,R[208],11,[[["self"]],["bool"]]],[0,"int",R[0],E,N,N],[8,"PrimInt",R[209],E,N,N],[10,R[210],E,R[211],12,[[["self"]],["u32"]]],[10,R[212],E,R[213],12,[[["self"]],["u32"]]],[10,R[214],E,R[215],12,[[["self"]],["u32"]]],[10,R[216],E,R[217],12,[[["self"]],["u32"]]],[10,R[218],E,R[36],12,[[["self"],["u32"]],["self"]]],[10,R[219],E,R[37],12,[[["self"],["u32"]],["self"]]],[10,R[220],E,R[36],12,[[["self"],["u32"]],["self"]]],[10,R[221],E,R[37],12,[[["self"],["u32"]],["self"]]],[10,R[222],E,R[36],12,[[["self"],["u32"]],["self"]]],[10,R[223],E,R[37],12,[[["self"],["u32"]],["self"]]],[10,R[224],E,R[225],12,[[["self"]],["self"]]],[10,"from_be",E,R[226],12,[[["self"]],["self"]]],[10,"from_le",E,R[227],12,[[["self"]],["self"]]],[10,"to_be",E,R[228],12,[[["self"]],["self"]]],[10,"to_le",E,R[229],12,[[["self"]],["self"]]],[10,"pow",E,R[230],12,[[["self"],["u32"]],["self"]]],[0,"ops",R[0],E,N,N],[0,"checked",R[39],E,N,N],[8,R[92],R[231],R[232],N,N],[10,R[233],E,R[234],13,[[["self"],["self"]],[R[1]]]],[8,R[93],E,R[235],N,N],[10,R[236],E,R[237],14,[[["self"],["self"]],[R[1]]]],[8,R[94],E,R[238],N,N],[10,R[239],E,R[240],15,[[["self"],["self"]],[R[1]]]],[8,R[95],E,R[241],N,N],[10,R[242],E,R[243],16,[[["self"],["self"]],[R[1]]]],[8,R[96],E,R[244],N,N],[10,R[245],E,R[246],17,[[["self"],["self"]],[R[1]]]],[8,R[97],E,R[247],N,N],[10,R[248],E,R[249],18,[[["self"]],[R[1]]]],[8,R[98],E,R[250],N,N],[10,R[251],E,R[38],19,[[["self"],["u32"]],[R[1]]]],[8,R[99],E,R[252],N,N],[10,R[253],E,R[38],20,[[["self"],["u32"]],[R[1]]]],[0,"inv",R[39],E,N,N],[8,"Inv",R[254],R[255],N,N],[16,"Output",E,R[43],21,N],[10,"inv",E,R[256],21,N],[0,R[41],R[39],E,N,N],[8,"MulAdd",R[257],R[40],N,N],[16,"Output",E,R[258],22,N],[10,R[41],E,R[42],22,N],[8,R[100],E,R[259],N,N],[10,R[260],E,R[42],23,[[["self"],["a"],["b"]]]],[0,R[261],R[39],E,N,N],[8,R[101],R[262],R[263],N,N],[10,R[264],E,R[265],24,[[["self"],["self"]],["self"]]],[10,R[266],E,R[267],24,[[["self"],["self"]],["self"]]],[0,"wrapping",R[39],E,N,N],[8,R[102],R[268],R[269],N,N],[10,R[270],E,R[271],25,[[["self"],["self"]],["self"]]],[8,R[103],E,R[272],N,N],[10,R[273],E,R[274],26,[[["self"],["self"]],["self"]]],[8,R[104],E,R[275],N,N],[10,R[276],E,R[277],27,[[["self"],["self"]],["self"]]],[8,R[105],E,R[278],N,N],[10,R[279],E,R[280],28,[[["self"],["u32"]],["self"]]],[8,R[106],E,R[281],N,N],[10,R[282],E,R[283],29,[[["self"],["u32"]],["self"]]],[0,"pow",R[0],E,N,N],[5,"pow",R[284],R[285],N,[[[T],["usize"]],[T]]],[5,R[286],E,R[287],N,[[[T],["usize"]],[R[1]]]],[8,"Pow",E,R[288],N,N],[16,"Output",E,R[43],30,N],[10,"pow",E,R[289],30,N],[0,"real",R[0],E,N,N],[8,"Real",R[290],R[291],N,N],[10,R[2],E,R[8],31,[[],["self"]]],[10,R[9],E,R[10],31,[[],["self"]]],[10,R[44],E,R[11],31,[[],["self"]]],[10,R[3],E,R[12],31,[[],["self"]]],[10,"floor",E,R[20],31,[[["self"]],["self"]]],[10,"ceil",E,R[21],31,[[["self"]],["self"]]],[10,"round",E,R[22],31,[[["self"]],["self"]]],[10,"trunc",E,R[23],31,[[["self"]],["self"]]],[10,"fract",E,R[24],31,[[["self"]],["self"]]],[10,"abs",E,R[25],31,[[["self"]],["self"]]],[10,R[78],E,R[26],31,[[["self"]],["self"]]],[10,R[27],E,R[45],31,[[["self"]],["bool"]]],[10,R[28],E,R[46],31,[[["self"]],["bool"]]],[10,R[41],E,R[40],31,[[["self"],["self"],["self"]],["self"]]],[10,"recip",E,R[47],31,[[["self"]],["self"]]],[10,"powi",E,R[29],31,[[["self"],["i32"]],["self"]]],[10,"powf",E,R[292],31,[[["self"],["self"]],["self"]]],[10,"sqrt",E,R[48],31,[[["self"]],["self"]]],[10,"exp",E,R[49],31,[[["self"]],["self"]]],[10,"exp2",E,R[50],31,[[["self"]],["self"]]],[10,"ln",E,R[51],31,[[["self"]],["self"]]],[10,"log",E,R[52],31,[[["self"],["self"]],["self"]]],[10,"log2",E,R[53],31,[[["self"]],["self"]]],[10,"log10",E,R[54],31,[[["self"]],["self"]]],[10,R[30],E,R[55],31,[[["self"]],["self"]]],[10,R[31],E,R[56],31,[[["self"]],["self"]]],[10,"max",E,R[32],31,[[["self"],["self"]],["self"]]],[10,"min",E,R[33],31,[[["self"],["self"]],["self"]]],[10,R[76],E,R[57],31,[[["self"],["self"]],["self"]]],[10,"cbrt",E,R[58],31,[[["self"]],["self"]]],[10,"hypot",E,R[59],31,[[["self"],["self"]],["self"]]],[10,"sin",E,R[60],31,[[["self"]],["self"]]],[10,"cos",E,R[61],31,[[["self"]],["self"]]],[10,"tan",E,R[62],31,[[["self"]],["self"]]],[10,"asin",E,R[63],31,[[["self"]],["self"]]],[10,"acos",E,R[64],31,[[["self"]],["self"]]],[10,"atan",E,R[65],31,[[["self"]],["self"]]],[10,"atan2",E,R[66],31,[[["self"],["self"]],["self"]]],[10,"sin_cos",E,R[67],31,N],[10,"exp_m1",E,R[68],31,[[["self"]],["self"]]],[10,"ln_1p",E,R[69],31,[[["self"]],["self"]]],[10,"sinh",E,R[70],31,[[["self"]],["self"]]],[10,"cosh",E,R[71],31,[[["self"]],["self"]]],[10,"tanh",E,R[72],31,[[["self"]],["self"]]],[10,"asinh",E,R[73],31,[[["self"]],["self"]]],[10,"acosh",E,R[74],31,[[["self"]],["self"]]],[10,"atanh",E,R[75],31,[[["self"]],["self"]]],[0,"sign",R[0],E,N,N],[5,"abs",R[293],R[77],N,[[[T]],[T]]],[5,R[76],E,R[57],N,[[[T],[T]],[T]]],[5,R[78],E,R[79],N,[[[T]],[T]]],[8,"Signed",E,R[294],N,N],[10,"abs",E,R[77],32,[[["self"]],["self"]]],[10,R[76],E,R[57],32,[[["self"],["self"]],["self"]]],[10,R[78],E,R[79],32,[[["self"]],["self"]]],[10,R[295],E,R[296],32,[[["self"]],["bool"]]],[10,R[297],E,R[298],32,[[["self"]],["bool"]]],[8,"Unsigned",E,R[299],N,N],[8,"Num",R[0],R[300],N,N],[16,R[301],E,E,33,N],[10,R[302],E,R[303],33,[[["str"],["u32"]],[R[82]]]],[8,"NumOps",E,R[304],N,N],[8,"NumRef",E,R[305],N,N],[8,"RefNum",E,R[306],N,N],[8,R[307],E,R[308],N,N],[8,R[309],E,R[310],N,N],[8,R[311],E,R[312],N,N],[11,R[80],E,E,0,[[[U]],[R[82]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[81],E,E,0,[[["self"]],[R[82]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[83],E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,R[313],E,E,0,[[["self"]],["string"]]],[11,R[80],E,E,1,[[[U]],[R[82]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[81],E,E,1,[[["self"]],[R[82]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[83],E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[82]]]],[11,"fmt",E,E,1,[[["self"],[R[84]]],[R[82]]]],[11,"fmt",E,E,0,[[["self"],[R[84]]],[R[82]]]]],"p":[[3,R[85]],[4,R[86]],[8,"Bounded"],[8,R[87]],[8,R[88]],[8,"NumCast"],[8,R[89]],[8,R[90]],[8,"Float"],[8,R[91]],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,R[92]],[8,R[93]],[8,R[94]],[8,R[95]],[8,R[96]],[8,R[97]],[8,R[98]],[8,R[99]],[8,"Inv"],[8,"MulAdd"],[8,R[100]],[8,R[101]],[8,R[102]],[8,R[103]],[8,R[104]],[8,R[105]],[8,R[106]],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex[r_aa]={"doc":R[107],"i":[[3,r_Yb,r_aa,E,N,N],[12,"kind",E,E,0,N],[4,r_Zb,E,E,N,N],[13,"Empty",E,E,1,N],[13,"Invalid",E,E,1,N],[5,"clamp",E,R[108],N,[[[T],[T],[T]],[T]]],[0,"bounds",E,E,N,N],[8,r_0b,R[109],R[110],N,N],[10,r_fa,E,R[111],2,[[],[r_ba]]],[10,r_ga,E,R[112],2,[[],[r_ba]]],[0,"cast",r_aa,E,N,N],[5,"cast",R[113],R[114],N,[[[T]],[r_ca]]],[8,r_1b,E,R[115],N,N],[11,"to_isize",E,R[116],3,[[[r_ba]],[r_ca,[r_da]]]],[11,"to_i8",E,R[117],3,[[[r_ba]],[r_ca,["i8"]]]],[11,"to_i16",E,R[118],3,[[[r_ba]],[r_ca,["i16"]]]],[11,"to_i32",E,R[119],3,[[[r_ba]],[r_ca,["i32"]]]],[10,"to_i64",E,R[120],3,[[[r_ba]],[r_ca,["i64"]]]],[11,"to_i128",E,R[121],3,[[[r_ba]],[r_ca,["i128"]]]],[11,"to_usize",E,R[122],3,[[[r_ba]],[r_ca,[r_ea]]]],[11,"to_u8",E,R[123],3,[[[r_ba]],[r_ca,["u8"]]]],[11,"to_u16",E,R[124],3,[[[r_ba]],[r_ca,["u16"]]]],[11,"to_u32",E,R[125],3,[[[r_ba]],[r_ca,[r_Wa]]]],[10,"to_u64",E,R[126],3,[[[r_ba]],[r_ca,["u64"]]]],[11,"to_u128",E,R[127],3,[[[r_ba]],[r_ca,["u128"]]]],[11,"to_f32",E,R[128],3,[[[r_ba]],[r_ca,["f32"]]]],[11,"to_f64",E,R[129],3,[[[r_ba]],[r_ca,["f64"]]]],[8,r_2b,E,R[130],N,N],[11,R[131],E,R[132],4,[[[r_da]],[r_ca]]],[11,"from_i8",E,R[133],4,[[["i8"]],[r_ca]]],[11,"from_i16",E,R[134],4,[[["i16"]],[r_ca]]],[11,"from_i32",E,R[135],4,[[["i32"]],[r_ca]]],[10,"from_i64",E,R[136],4,[[["i64"]],[r_ca]]],[11,R[137],E,R[138],4,[[["i128"]],[r_ca]]],[11,R[139],E,R[140],4,[[[r_ea]],[r_ca]]],[11,"from_u8",E,R[141],4,[[["u8"]],[r_ca]]],[11,"from_u16",E,R[142],4,[[["u16"]],[r_ca]]],[11,"from_u32",E,R[143],4,[[[r_Wa]],[r_ca]]],[10,"from_u64",E,R[144],4,[[["u64"]],[r_ca]]],[11,R[145],E,R[146],4,[[["u128"]],[r_ca]]],[11,"from_f32",E,R[147],4,[[["f32"]],[r_ca]]],[11,"from_f64",E,R[148],4,[[["f64"]],[r_ca]]],[8,r_3b,E,R[149],N,N],[10,r_Rb,E,R[150],5,[[[T]],[r_ca]]],[8,r_4b,E,R[151],N,N],[10,"as_",E,R[152],6,[[[r_ba]],[T]]],[0,"float",r_aa,E,N,N],[8,r_5b,R[153],R[154],N,N],[10,r_ia,E,R[155],7,[[],[r_ba]]],[10,r_ja,E,R[156],7,[[],[r_ba]]],[10,"nan",E,R[157],7,[[],[r_ba]]],[10,r_ka,E,r_la,7,[[],[r_ba]]],[10,r_fa,E,r_ma,7,[[],[r_ba]]],[10,r_na,E,r_oa,7,[[],[r_ba]]],[10,r_pa,E,r_qa,7,[[],[r_ba]]],[10,r_ga,E,r_ra,7,[[],[r_ba]]],[11,r_sa,E,R[158],7,[[[r_ba]],[r_ha]]],[11,r_ta,E,R[159],7,[[[r_ba]],[r_ha]]],[11,r_ua,E,R[160],7,[[[r_ba]],[r_ha]]],[11,r_va,E,r_wa,7,[[[r_ba]],[r_ha]]],[10,r_xa,E,r_ya,7,[[[r_ba]],[r_za]]],[11,r_Aa,E,r_Ba,7,[[[r_ba]],[r_ba]]],[11,r_6a,E,r_Ca,7,[[[r_ba]],[r_ba]]],[11,r_Da,E,r_Ea,7,[[[r_ba]],[r_ba]]],[11,r_Fa,E,r_Ga,7,[[[r_ba]],[r_ba]]],[11,r_Ha,E,r_Ia,7,[[[r_ba]],[r_ba]]],[11,"abs",E,r_Ja,7,[[[r_ba]],[r_ba]]],[11,r_Ka,E,r_La,7,[[[r_ba]],[r_ba]]],[11,r_Ma,E,R[161],7,[[[r_ba]],[r_ha]]],[11,r_Na,E,R[162],7,[[[r_ba]],[r_ha]]],[11,"min",E,r_Ta,7,[[[r_ba],[r_ba]],[r_ba]]],[11,"max",E,r_Sa,7,[[[r_ba],[r_ba]],[r_ba]]],[11,r_Oa,E,R[163],7,[[[r_ba]],[r_ba]]],[11,r_ab,E,r_Pa,7,[[[r_ba],["i32"]],[r_ba]]],[10,r_Qa,E,R[164],7,[[[r_ba]],[r_ba]]],[10,r_Ra,E,R[165],7,[[[r_ba]],[r_ba]]],[10,r_Ua,E,r_Va,7,N],[8,r_6b,E,R[166],N,N],[10,"nan",E,R[167],8,[[],[r_ba]]],[10,r_ia,E,R[168],8,[[],[r_ba]]],[10,r_ja,E,R[169],8,[[],[r_ba]]],[10,r_ka,E,r_la,8,[[],[r_ba]]],[10,r_fa,E,r_ma,8,[[],[r_ba]]],[10,r_na,E,r_oa,8,[[],[r_ba]]],[11,r_pa,E,r_qa,8,[[],[r_ba]]],[10,r_ga,E,r_ra,8,[[],[r_ba]]],[10,r_sa,E,R[170],8,[[[r_ba]],[r_ha]]],[10,r_ta,E,R[171],8,[[[r_ba]],[r_ha]]],[10,r_ua,E,R[172],8,[[[r_ba]],[r_ha]]],[10,r_va,E,r_wa,8,[[[r_ba]],[r_ha]]],[10,r_xa,E,r_ya,8,[[[r_ba]],[r_za]]],[10,r_Aa,E,r_Ba,8,[[[r_ba]],[r_ba]]],[10,r_6a,E,r_Ca,8,[[[r_ba]],[r_ba]]],[10,r_Da,E,r_Ea,8,[[[r_ba]],[r_ba]]],[10,r_Fa,E,r_Ga,8,[[[r_ba]],[r_ba]]],[10,r_Ha,E,r_Ia,8,[[[r_ba]],[r_ba]]],[10,"abs",E,r_Ja,8,[[[r_ba]],[r_ba]]],[10,r_Ka,E,r_La,8,[[[r_ba]],[r_ba]]],[10,r_Ma,E,r_7a,8,[[[r_ba]],[r_ha]]],[10,r_Na,E,r_8a,8,[[[r_ba]],[r_ha]]],[10,r_1a,E,r_2a,8,[[[r_ba],[r_ba],[r_ba]],[r_ba]]],[10,r_Oa,E,r_9a,8,[[[r_ba]],[r_ba]]],[10,r_ab,E,r_Pa,8,[[[r_ba],["i32"]],[r_ba]]],[10,"powf",E,R[173],8,[[[r_ba],[r_ba]],[r_ba]]],[10,"sqrt",E,r_bb,8,[[[r_ba]],[r_ba]]],[10,"exp",E,r_cb,8,[[[r_ba]],[r_ba]]],[10,"exp2",E,r_db,8,[[[r_ba]],[r_ba]]],[10,"ln",E,r_eb,8,[[[r_ba]],[r_ba]]],[10,"log",E,r_fb,8,[[[r_ba],[r_ba]],[r_ba]]],[10,"log2",E,r_gb,8,[[[r_ba]],[r_ba]]],[10,r_hb,E,r_ib,8,[[[r_ba]],[r_ba]]],[11,r_Qa,E,r_jb,8,[[[r_ba]],[r_ba]]],[11,r_Ra,E,r_kb,8,[[[r_ba]],[r_ba]]],[10,"max",E,r_Sa,8,[[[r_ba],[r_ba]],[r_ba]]],[10,"min",E,r_Ta,8,[[[r_ba],[r_ba]],[r_ba]]],[10,r_lb,E,r_mb,8,[[[r_ba],[r_ba]],[r_ba]]],[10,"cbrt",E,r_nb,8,[[[r_ba]],[r_ba]]],[10,r_ob,E,r_pb,8,[[[r_ba],[r_ba]],[r_ba]]],[10,"sin",E,r_qb,8,[[[r_ba]],[r_ba]]],[10,"cos",E,r_rb,8,[[[r_ba]],[r_ba]]],[10,"tan",E,r_sb,8,[[[r_ba]],[r_ba]]],[10,"asin",E,r_tb,8,[[[r_ba]],[r_ba]]],[10,"acos",E,r_ub,8,[[[r_ba]],[r_ba]]],[10,"atan",E,r_vb,8,[[[r_ba]],[r_ba]]],[10,r_wb,E,r_xb,8,[[[r_ba],[r_ba]],[r_ba]]],[10,r_yb,E,r_zb,8,N],[10,r_Ab,E,r_Bb,8,[[[r_ba]],[r_ba]]],[10,r_Cb,E,r_Db,8,[[[r_ba]],[r_ba]]],[10,"sinh",E,r_Eb,8,[[[r_ba]],[r_ba]]],[10,"cosh",E,r_Fb,8,[[[r_ba]],[r_ba]]],[10,"tanh",E,r_Gb,8,[[[r_ba]],[r_ba]]],[10,r_Hb,E,r_Ib,8,[[[r_ba]],[r_ba]]],[10,r_Jb,E,r_Kb,8,[[[r_ba]],[r_ba]]],[10,r_Lb,E,r_Mb,8,[[[r_ba]],[r_ba]]],[10,r_Ua,E,r_Va,8,N],[8,r_7b,E,E,N,N],[10,"E",E,R[174],9,[[],[r_ba]]],[10,R[175],E,R[176],9,[[],[r_ba]]],[10,R[177],E,R[178],9,[[],[r_ba]]],[10,R[179],E,R[180],9,[[],[r_ba]]],[10,R[181],E,R[182],9,[[],[r_ba]]],[10,R[183],E,R[184],9,[[],[r_ba]]],[10,R[185],E,R[186],9,[[],[r_ba]]],[10,R[187],E,R[188],9,[[],[r_ba]]],[10,R[189],E,R[190],9,[[],[r_ba]]],[10,R[191],E,R[192],9,[[],[r_ba]]],[10,"LN_10",E,R[193],9,[[],[r_ba]]],[10,"LN_2",E,R[194],9,[[],[r_ba]]],[10,"LOG10_E",E,R[195],9,[[],[r_ba]]],[10,"LOG2_E",E,R[196],9,[[],[r_ba]]],[10,"PI",E,R[197],9,[[],[r_ba]]],[10,"SQRT_2",E,R[198],9,[[],[r_ba]]],[0,R[199],r_aa,E,N,N],[5,r_tc,R[200],R[201],N,[[],[T]]],[5,"one",E,R[202],N,[[],[T]]],[8,"Zero",E,R[203],N,N],[10,r_tc,E,R[204],10,[[],[r_ba]]],[10,r_uc,E,R[205],10,[[[r_ba]],[r_ha]]],[8,"One",E,R[206],N,N],[10,"one",E,R[207],11,[[],[r_ba]]],[11,"is_one",E,R[208],11,[[[r_ba]],[r_ha]]],[0,"int",r_aa,E,N,N],[8,r_8b,R[209],E,N,N],[10,R[210],E,R[211],12,[[[r_ba]],[r_Wa]]],[10,R[212],E,R[213],12,[[[r_ba]],[r_Wa]]],[10,R[214],E,R[215],12,[[[r_ba]],[r_Wa]]],[10,R[216],E,R[217],12,[[[r_ba]],[r_Wa]]],[10,R[218],E,r_Xa,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[219],E,r_Ya,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[220],E,r_Xa,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[221],E,r_Ya,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[222],E,r_Xa,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[223],E,r_Ya,12,[[[r_ba],[r_Wa]],[r_ba]]],[10,R[224],E,R[225],12,[[[r_ba]],[r_ba]]],[10,"from_be",E,R[226],12,[[[r_ba]],[r_ba]]],[10,"from_le",E,R[227],12,[[[r_ba]],[r_ba]]],[10,"to_be",E,R[228],12,[[[r_ba]],[r_ba]]],[10,"to_le",E,R[229],12,[[[r_ba]],[r_ba]]],[10,"pow",E,R[230],12,[[[r_ba],[r_Wa]],[r_ba]]],[0,"ops",r_aa,E,N,N],[0,"checked",r_0a,E,N,N],[8,r_9b,R[231],R[232],N,N],[10,R[233],E,R[234],13,[[[r_ba],[r_ba]],[r_ca]]],[8,r_ac,E,R[235],N,N],[10,R[236],E,R[237],14,[[[r_ba],[r_ba]],[r_ca]]],[8,r_bc,E,R[238],N,N],[10,R[239],E,R[240],15,[[[r_ba],[r_ba]],[r_ca]]],[8,r_cc,E,R[241],N,N],[10,R[242],E,R[243],16,[[[r_ba],[r_ba]],[r_ca]]],[8,r_dc,E,R[244],N,N],[10,R[245],E,R[246],17,[[[r_ba],[r_ba]],[r_ca]]],[8,r_ec,E,R[247],N,N],[10,R[248],E,R[249],18,[[[r_ba]],[r_ca]]],[8,r_fc,E,R[250],N,N],[10,R[251],E,r_Za,19,[[[r_ba],[r_Wa]],[r_ca]]],[8,r_gc,E,R[252],N,N],[10,R[253],E,r_Za,20,[[[r_ba],[r_Wa]],[r_ca]]],[0,"inv",r_0a,E,N,N],[8,"Inv",R[254],R[255],N,N],[16,r_3a,E,r_5a,21,N],[10,"inv",E,R[256],21,N],[0,r_1a,r_0a,E,N,N],[8,r_hc,R[257],r_2a,N,N],[16,r_3a,E,R[258],22,N],[10,r_1a,E,r_4a,22,N],[8,r_ic,E,R[259],N,N],[10,R[260],E,r_4a,23,[[[r_ba],["a"],["b"]]]],[0,R[261],r_0a,E,N,N],[8,r_jc,R[262],R[263],N,N],[10,R[264],E,R[265],24,[[[r_ba],[r_ba]],[r_ba]]],[10,R[266],E,R[267],24,[[[r_ba],[r_ba]],[r_ba]]],[0,"wrapping",r_0a,E,N,N],[8,r_kc,R[268],R[269],N,N],[10,R[270],E,R[271],25,[[[r_ba],[r_ba]],[r_ba]]],[8,r_lc,E,R[272],N,N],[10,R[273],E,R[274],26,[[[r_ba],[r_ba]],[r_ba]]],[8,r_mc,E,R[275],N,N],[10,R[276],E,R[277],27,[[[r_ba],[r_ba]],[r_ba]]],[8,r_nc,E,R[278],N,N],[10,R[279],E,R[280],28,[[[r_ba],[r_Wa]],[r_ba]]],[8,r_oc,E,R[281],N,N],[10,R[282],E,R[283],29,[[[r_ba],[r_Wa]],[r_ba]]],[0,"pow",r_aa,E,N,N],[5,"pow",R[284],R[285],N,[[[T],[r_ea]],[T]]],[5,R[286],E,R[287],N,[[[T],[r_ea]],[r_ca]]],[8,"Pow",E,R[288],N,N],[16,r_3a,E,r_5a,30,N],[10,"pow",E,R[289],30,N],[0,"real",r_aa,E,N,N],[8,"Real",R[290],R[291],N,N],[10,r_fa,E,r_ma,31,[[],[r_ba]]],[10,r_na,E,r_oa,31,[[],[r_ba]]],[10,r_pa,E,r_qa,31,[[],[r_ba]]],[10,r_ga,E,r_ra,31,[[],[r_ba]]],[10,r_Aa,E,r_Ba,31,[[[r_ba]],[r_ba]]],[10,r_6a,E,r_Ca,31,[[[r_ba]],[r_ba]]],[10,r_Da,E,r_Ea,31,[[[r_ba]],[r_ba]]],[10,r_Fa,E,r_Ga,31,[[[r_ba]],[r_ba]]],[10,r_Ha,E,r_Ia,31,[[[r_ba]],[r_ba]]],[10,"abs",E,r_Ja,31,[[[r_ba]],[r_ba]]],[10,r_Ka,E,r_La,31,[[[r_ba]],[r_ba]]],[10,r_Ma,E,r_7a,31,[[[r_ba]],[r_ha]]],[10,r_Na,E,r_8a,31,[[[r_ba]],[r_ha]]],[10,r_1a,E,r_2a,31,[[[r_ba],[r_ba],[r_ba]],[r_ba]]],[10,r_Oa,E,r_9a,31,[[[r_ba]],[r_ba]]],[10,r_ab,E,r_Pa,31,[[[r_ba],["i32"]],[r_ba]]],[10,"powf",E,R[292],31,[[[r_ba],[r_ba]],[r_ba]]],[10,"sqrt",E,r_bb,31,[[[r_ba]],[r_ba]]],[10,"exp",E,r_cb,31,[[[r_ba]],[r_ba]]],[10,"exp2",E,r_db,31,[[[r_ba]],[r_ba]]],[10,"ln",E,r_eb,31,[[[r_ba]],[r_ba]]],[10,"log",E,r_fb,31,[[[r_ba],[r_ba]],[r_ba]]],[10,"log2",E,r_gb,31,[[[r_ba]],[r_ba]]],[10,r_hb,E,r_ib,31,[[[r_ba]],[r_ba]]],[10,r_Qa,E,r_jb,31,[[[r_ba]],[r_ba]]],[10,r_Ra,E,r_kb,31,[[[r_ba]],[r_ba]]],[10,"max",E,r_Sa,31,[[[r_ba],[r_ba]],[r_ba]]],[10,"min",E,r_Ta,31,[[[r_ba],[r_ba]],[r_ba]]],[10,r_lb,E,r_mb,31,[[[r_ba],[r_ba]],[r_ba]]],[10,"cbrt",E,r_nb,31,[[[r_ba]],[r_ba]]],[10,r_ob,E,r_pb,31,[[[r_ba],[r_ba]],[r_ba]]],[10,"sin",E,r_qb,31,[[[r_ba]],[r_ba]]],[10,"cos",E,r_rb,31,[[[r_ba]],[r_ba]]],[10,"tan",E,r_sb,31,[[[r_ba]],[r_ba]]],[10,"asin",E,r_tb,31,[[[r_ba]],[r_ba]]],[10,"acos",E,r_ub,31,[[[r_ba]],[r_ba]]],[10,"atan",E,r_vb,31,[[[r_ba]],[r_ba]]],[10,r_wb,E,r_xb,31,[[[r_ba],[r_ba]],[r_ba]]],[10,r_yb,E,r_zb,31,N],[10,r_Ab,E,r_Bb,31,[[[r_ba]],[r_ba]]],[10,r_Cb,E,r_Db,31,[[[r_ba]],[r_ba]]],[10,"sinh",E,r_Eb,31,[[[r_ba]],[r_ba]]],[10,"cosh",E,r_Fb,31,[[[r_ba]],[r_ba]]],[10,"tanh",E,r_Gb,31,[[[r_ba]],[r_ba]]],[10,r_Hb,E,r_Ib,31,[[[r_ba]],[r_ba]]],[10,r_Jb,E,r_Kb,31,[[[r_ba]],[r_ba]]],[10,r_Lb,E,r_Mb,31,[[[r_ba]],[r_ba]]],[0,"sign",r_aa,E,N,N],[5,"abs",R[293],r_Nb,N,[[[T]],[T]]],[5,r_lb,E,r_mb,N,[[[T],[T]],[T]]],[5,r_Ka,E,r_Ob,N,[[[T]],[T]]],[8,r_pc,E,R[294],N,N],[10,"abs",E,r_Nb,32,[[[r_ba]],[r_ba]]],[10,r_lb,E,r_mb,32,[[[r_ba],[r_ba]],[r_ba]]],[10,r_Ka,E,r_Ob,32,[[[r_ba]],[r_ba]]],[10,R[295],E,R[296],32,[[[r_ba]],[r_ha]]],[10,R[297],E,R[298],32,[[[r_ba]],[r_ha]]],[8,"Unsigned",E,R[299],N,N],[8,"Num",r_aa,R[300],N,N],[16,R[301],E,E,33,N],[10,R[302],E,R[303],33,[[["str"],[r_Wa]],[r_Pb]]],[8,"NumOps",E,R[304],N,N],[8,"NumRef",E,R[305],N,N],[8,"RefNum",E,R[306],N,N],[8,R[307],E,R[308],N,N],[8,R[309],E,R[310],N,N],[8,R[311],E,R[312],N,N],[11,r_Qb,E,E,0,[[[U]],[r_Pb]]],[11,r_Rb,E,E,0,[[[T]],[T]]],[11,r_Sb,E,E,0,[[[r_ba]],[r_Pb]]],[11,r_sc,E,E,0,[[[r_ba]],[U]]],[11,r_Tb,E,E,0,[[[r_ba]],[T]]],[11,r_Ub,E,E,0,[[[r_ba]],[T]]],[11,r_Vb,E,E,0,[[[r_ba]],[r_Wb]]],[11,R[313],E,E,0,[[[r_ba]],[r_rc]]],[11,r_Qb,E,E,1,[[[U]],[r_Pb]]],[11,r_Rb,E,E,1,[[[T]],[T]]],[11,r_Sb,E,E,1,[[[r_ba]],[r_Pb]]],[11,r_sc,E,E,1,[[[r_ba]],[U]]],[11,r_Tb,E,E,1,[[[r_ba]],[T]]],[11,r_Ub,E,E,1,[[[r_ba]],[T]]],[11,r_Vb,E,E,1,[[[r_ba]],[r_Wb]]],[11,"fmt",E,E,0,[[[r_ba],[r_Xb]],[r_Pb]]],[11,"fmt",E,E,1,[[[r_ba],[r_Xb]],[r_Pb]]],[11,"fmt",E,E,0,[[[r_ba],[r_Xb]],[r_Pb]]]],"p":[[3,r_Yb],[4,r_Zb],[8,r_0b],[8,r_1b],[8,r_2b],[8,r_3b],[8,r_4b],[8,r_5b],[8,r_6b],[8,r_7b],[8,"Zero"],[8,"One"],[8,r_8b],[8,r_9b],[8,r_ac],[8,r_bc],[8,r_cc],[8,r_dc],[8,r_ec],[8,r_fc],[8,r_gc],[8,"Inv"],[8,r_hc],[8,r_ic],[8,r_jc],[8,r_kc],[8,r_lc],[8,r_mc],[8,r_nc],[8,r_oc],[8,"Pow"],[8,"Real"],[8,r_pc],[8,"Num"]]};
searchIndex[r_qc]={"doc":r_wc,"i":[[3,r_vc,r_qc,r_xc,N,N],[11,"new",E,r_yc,0,[[["vec"]],[r_qc]]],[11,"eval",E,r_zc,0,[[[r_ba],[T]],[T]]],[11,"data",E,r_Ac,0,N],[11,r_Bc,E,r_Cc,0,[[[r_ba],["str"]],[r_rc]]],[11,r_Rb,E,E,0,[[[T]],[T]]],[11,r_sc,E,E,0,[[[r_ba]],[U]]],[11,r_Dc,E,E,0,[[[r_ba]],[T]]],[11,r_Ec,E,E,0,N],[11,r_Qb,E,E,0,[[[U]],[r_Pb]]],[11,r_Tb,E,E,0,[[[r_ba]],[T]]],[11,r_Vb,E,E,0,[[[r_ba]],[r_Wb]]],[11,r_Sb,E,E,0,[[[r_ba]],[r_Pb]]],[11,r_Ub,E,E,0,[[[r_ba]],[T]]],[11,"eq",E,E,0,[[[r_ba],[r_qc]],[r_ha]]],[11,"ne",E,E,0,[[[r_ba],[r_qc]],[r_ha]]],[11,r_Fc,E,E,0,[[[r_ba]],[r_qc]]],[11,"add",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"add",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"sub",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"sub",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"mul",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"mul",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"neg",E,E,0,[[[r_ba]],[r_qc]]],[11,"fmt",E,E,0,[[[r_ba],[r_Xb]],[r_Pb]]],[11,r_tc,E,E,0,[[],[r_qc]]],[11,r_uc,E,E,0,[[[r_ba]],[r_ha]]],[11,"one",E,E,0,[[],[r_qc]]]],"p":[[3,r_vc]]};
searchIndex[r_qc]={"doc":r_wc,"items":[[3,r_vc,r_qc,r_xc,N,N],[11,"new",E,r_yc,0,[[["vec"]],[r_qc]]],[11,"eval",E,r_zc,0,[[[r_ba],[T]],[T]]],[11,"data",E,r_Ac,0,N],[11,r_Bc,E,r_Cc,0,[[[r_ba],["str"]],[r_rc]]],[11,r_Rb,E,E,0,[[[T]],[T]]],[11,r_sc,E,E,0,[[[r_ba]],[U]]],[11,r_Dc,E,E,0,[[[r_ba]],[T]]],[11,r_Ec,E,E,0,N],[11,r_Qb,E,E,0,[[[U]],[r_Pb]]],[11,r_Tb,E,E,0,[[[r_ba]],[T]]],[11,r_Ub,E,E,0,[[[r_ba]],[T]]],[11,r_Sb,E,E,0,[[[r_ba]],[r_Pb]]],[11,r_Vb,E,E,0,[[[r_ba]],[r_Wb]]],[11,"eq",E,E,0,[[[r_ba],[r_qc]],[r_ha]]],[11,"ne",E,E,0,[[[r_ba],[r_qc]],[r_ha]]],[11,r_Fc,E,E,0,[[[r_ba]],[r_qc]]],[11,"fmt",E,E,0,[[[r_ba],[r_Xb]],[r_Pb]]],[11,"sub",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"sub",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"add",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"add",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"mul",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"mul",E,E,0,[[[r_ba],[r_qc]],[r_qc]]],[11,"neg",E,E,0,[[[r_ba]],[r_qc]]],[11,r_tc,E,E,0,[[],[r_qc]]],[11,r_uc,E,E,0,[[[r_ba]],[r_ha]]],[11,"one",E,E,0,[[],[r_qc]]]],"paths":[[3,r_vc]]};
initSearch(searchIndex);addSearchOptions(searchIndex);